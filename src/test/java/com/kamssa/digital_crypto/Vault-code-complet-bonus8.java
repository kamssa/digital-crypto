
üóÇÔ∏è Arborescence du projet
swift
Copier
Modifier
src/main/java/com/example/securevault/
‚îú‚îÄ‚îÄ SecureVaultApplication.java
‚îú‚îÄ‚îÄ config/
‚îÇ   ‚îî‚îÄ‚îÄ VaultProperties.java
‚îú‚îÄ‚îÄ model/
‚îÇ   ‚îî‚îÄ‚îÄ Credentials.java
‚îú‚îÄ‚îÄ service/
‚îÇ   ‚îú‚îÄ‚îÄ VaultAuthService.java
‚îÇ   ‚îú‚îÄ‚îÄ VaultCredentialFetcher.java
‚îÇ   ‚îú‚îÄ‚îÄ VaultCredentialsCache.java
‚îÇ   ‚îú‚îÄ‚îÄ VaultDataSourceProvider.java
‚îÇ   ‚îî‚îÄ‚îÄ SecurePostgresService.java
‚îî‚îÄ‚îÄ controller/
    ‚îî‚îÄ‚îÄ VaultTestController.java
üß© 1. VaultProperties (config via application.yml ou .properties)
java
Copier
Modifier
@Configuration
@ConfigurationProperties(prefix = "vault")
public class VaultProperties {

    private String address;
    private String namespace;
    private String role;
    private String keystorePath;
    private String keystorePassword;

    // getters & setters
}
üìÑ 2. application.yml (ou .properties)
yaml
Copier
Modifier
vault:
  address: https://vault.example.com
  namespace: my/namespace
  role: my-postgres-role
  keystorePath: classpath:certs/client.p12
  keystorePassword: changeit
üß† 3. Credentials.java
java
Copier
Modifier
public class Credentials {
    private final String username;
    private final String password;

    public Credentials(String username, String password) {
        this.username = username;
        this.password = password;
    }

    // getters
}
üîê 4. VaultAuthService.java (authentification par certificat client)
java
Copier
Modifier
@Service
public class VaultAuthService {

    private final VaultProperties properties;

    public VaultAuthService(VaultProperties properties) {
        this.properties = properties;
    }

    public String authenticateWithCert() {
        try (InputStream is = new ClassPathResource(properties.getKeystorePath()).getInputStream()) {
            KeyStore ks = KeyStore.getInstance("PKCS12");
            ks.load(is, properties.getKeystorePassword().toCharArray());

            SSLContext sslContext = SSLContextBuilder.create()
                    .loadKeyMaterial(ks, properties.getKeystorePassword().toCharArray())
                    .build();

            CloseableHttpClient client = HttpClients.custom()
                    .setSSLSocketFactory(new SSLConnectionSocketFactory(sslContext))
                    .build();

            RestTemplate restTemplate = new RestTemplate(new HttpComponentsClientHttpRequestFactory(client));

            HttpHeaders headers = new HttpHeaders();
            headers.set("X-Vault-Namespace", properties.getNamespace());
            headers.set("X-Vault-Request", "true");
            headers.setContentType(MediaType.APPLICATION_JSON);

            String body = "{\"name\":\"" + properties.getRole() + "\"}";
            ResponseEntity<String> response = restTemplate.postForEntity(
                    properties.getAddress() + "/v1/auth/cert/login",
                    new HttpEntity<>(body, headers),
                    String.class
            );

            return new ObjectMapper()
                    .readTree(response.getBody())
                    .path("auth").path("client_token").asText();

        } catch (Exception e) {
            throw new RuntimeException("Erreur d'authentification Vault", e);
        }
    }
}
üîÑ 5. VaultCredentialFetcher.java
java
Copier
Modifier
@Service
public class VaultCredentialFetcher {

    private final VaultAuthService authService;
    private final VaultProperties properties;
    private final RestTemplate restTemplate = new RestTemplate();
    private final ObjectMapper mapper = new ObjectMapper();
    private String currentToken;

    public VaultCredentialFetcher(VaultAuthService authService, VaultProperties properties) {
        this.authService = authService;
        this.properties = properties;
        this.currentToken = authService.authenticateWithCert();
    }

    public Credentials fetch() {
        try {
            return fetchWithToken();
        } catch (HttpClientErrorException.Forbidden e) {
            this.currentToken = authService.authenticateWithCert();
            return fetchWithToken();
        }
    }

    private Credentials fetchWithToken() {
        HttpHeaders headers = new HttpHeaders();
        headers.set("X-Vault-Token", currentToken);
        headers.set("X-Vault-Namespace", properties.getNamespace());
        headers.set("X-Vault-Request", "true");

        ResponseEntity<String> response = restTemplate.exchange(
                properties.getAddress() + "/v1/database/creds/" + properties.getRole(),
                HttpMethod.GET,
                new HttpEntity<>(headers),
                String.class
        );

        JsonNode data = mapper.readTree(response.getBody()).path("data");
        return new Credentials(data.path("username").asText(), data.path("password").asText());
    }
}
üß† 6. VaultCredentialsCache.java
java
Copier
Modifier
@Component
public class VaultCredentialsCache {
    private final AtomicReference<Credentials> cache = new AtomicReference<>();

    public Credentials get() {
        return cache.get();
    }

    public void update(Credentials credentials) {
        cache.set(credentials);
    }

    public void clear() {
        cache.set(null);
    }
}
üõ† 7. VaultDataSourceProvider.java
java
Copier
Modifier
@Component
public class VaultDataSourceProvider {

    private final VaultCredentialsCache cache;

    public VaultDataSourceProvider(VaultCredentialsCache cache) {
        this.cache = cache;
    }

    public DataSource build() {
        Credentials creds = cache.get();
        if (creds == null) throw new IllegalStateException("Aucun credentials disponibles");

        HikariConfig config = new HikariConfig();
        config.setJdbcUrl("jdbc:postgresql://host:5432/db");
        config.setUsername(creds.getUsername());
        config.setPassword(creds.getPassword());
        config.setMaximumPoolSize(2);

        return new HikariDataSource(config);
    }
}
üîÅ 8. SecurePostgresService.java
java
Copier
Modifier
@Service
public class SecurePostgresService {

    private final VaultCredentialsCache cache;
    private final VaultCredentialFetcher fetcher;
    private final VaultDataSourceProvider provider;

    public SecurePostgresService(VaultCredentialsCache cache,
                                 VaultCredentialFetcher fetcher,
                                 VaultDataSourceProvider provider) {
        this.cache = cache;
        this.fetcher = fetcher;
        this.provider = provider;
        refreshCredentials(); // initial fetch
    }

    public void testConnection() {
        try (Connection conn = provider.build().getConnection()) {
            if (!conn.isClosed()) {
                System.out.println("‚úÖ Connexion PostgreSQL r√©ussie !");
            }
        } catch (SQLException e) {
            System.out.println("‚ö†Ô∏è Connexion √©chou√©e, rafra√Æchissement des credentials...");
            refreshCredentials();
            try (Connection retry = provider.build().getConnection()) {
                if (!retry.isClosed()) {
                    System.out.println("‚úÖ Connexion r√©ussie apr√®s refresh !");
                }
            } catch (SQLException ex) {
                throw new RuntimeException("‚ùå Connexion √©chou√©e m√™me apr√®s refresh", ex);
            }
        }
    }

    private void refreshCredentials() {
        Credentials newCreds = fetcher.fetch();
        cache.update(newCreds);
    }
}
‚úÖ 9. VaultTestController.java (optionnel)
java
Copier
Modifier
@RestController
@RequestMapping("/vault")
public class VaultTestController {

    private final SecurePostgresService service;

    public VaultTestController(SecurePostgresService service) {
        this.service = service;
    }

    @GetMapping("/test")
    public ResponseEntity<String> test() {
        service.testConnection();
        return ResponseEntity.ok("Test termin√©.");
    }
}
Tu peux maintenant :

Centraliser l‚Äôauthentification cert,

Rafra√Æchir seulement en cas d‚Äôerreur,

Garder des composants testables, injectables, r√©utilisables.

Souhaites-tu que je t‚Äôaide √† g√©n√©rer un squelette de projet complet (ex: pom.xml, structure ZIP) ?
///////////////////////////////////////////////////
‚úÖ √âtapes √† suivre
1. Injecter SecurePostgresService dans ton service m√©tier
java
Copier
Modifier
@Service
public class MonServiceMetier {

    private final SecurePostgresService securePostgresService;

    public MonServiceMetier(SecurePostgresService securePostgresService) {
        this.securePostgresService = securePostgresService;
    }

    public void lireDonnees() {
        try (Connection conn = securePostgresService.getConnection()) {
            PreparedStatement stmt = conn.prepareStatement("SELECT * FROM ma_table");
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                String valeur = rs.getString("colonne");
                System.out.println("Valeur = " + valeur);
            }

        } catch (SQLException e) {
            throw new RuntimeException("Erreur lors de la lecture des donn√©es", e);
        }
    }
}
2. Ajouter une m√©thode getConnection() dans SecurePostgresService
Ton SecurePostgresService expose actuellement uniquement testConnection(). Il faut lui ajouter un acc√®s direct √† la Connection :

java
Copier
Modifier
public Connection getConnection() throws SQLException {
    try {
        return provider.build().getConnection();
    } catch (SQLException e) {
        System.out.println("‚ö†Ô∏è Connexion √©chou√©e, rafra√Æchissement des credentials...");
        refreshCredentials();
        return provider.build().getConnection();
    }
}
3. Utilisation dans un contr√¥leur ou autre composant
java
Copier
Modifier
@RestController
@RequestMapping("/data")
public class DonneesController {

    private final MonServiceMetier metier;

    public DonneesController(MonServiceMetier metier) {
        this.metier = metier;
    }

    @GetMapping("/read")
    public ResponseEntity<String> lire() {
        metier.lireDonnees();
        return ResponseEntity.ok("Lecture termin√©e");
    }
}
üß© R√©sum√©
Tu peux acc√©der aux donn√©es PostgreSQL comme d‚Äôhabitude avec JDBC, en passant par une Connection obtenue via SecurePostgresService.

üõ° Bonus recommand√© : Gestion transactionnelle
Si tu fais des √©critures complexes, il serait utile d‚Äôajouter un wrapper autour de la Connection pour supporter les transactions manuelles (ou envisager un JdbcTemplate si tu veux aller plus loin).

Souhaites-tu que je t‚Äôaide √† :

Ajouter un service pour ex√©cuter des requ√™tes g√©n√©riques ?

Mettre en place un JdbcTemplate s√©curis√© bas√© sur les credentials Vault ?

Ajouter des tests unitaires avec H2 ou PostgreSQL mock√© ?

Je peux aussi t‚Äôajouter un exemple complet de lecture/√©criture dans ma_table.







Vous avez dit¬†:
Ajouter un service pour ex√©cuter des requ√™tes g√©n√©riques ?


ChatGPT a dit¬†:
Parfait ! Voici comment ajouter un service g√©n√©rique d'ex√©cution de requ√™tes SQL (lecture/√©criture) en utilisant ton syst√®me de connexion s√©curis√©e (SecurePostgresService).

‚úÖ Objectif
Cr√©er un GenericQueryService qui permet :

d‚Äôex√©cuter des requ√™tes de lecture (SELECT) avec un ResultSetExtractor ou RowMapper.

d‚Äôex√©cuter des requ√™tes d'√©criture (INSERT, UPDATE, DELETE) avec param√®tres.

üìÅ Fichier : GenericQueryService.java
java
Copier
Modifier
package com.example.securevault.service;

import org.springframework.stereotype.Service;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Function;

@Service
public class GenericQueryService {

    private final SecurePostgresService securePostgresService;

    public GenericQueryService(SecurePostgresService securePostgresService) {
        this.securePostgresService = securePostgresService;
    }

    public <T> List<T> executeQuery(String sql, List<Object> params, Function<ResultSet, T> rowMapper) {
        try (Connection conn = securePostgresService.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            for (int i = 0; i < params.size(); i++) {
                stmt.setObject(i + 1, params.get(i));
            }

            ResultSet rs = stmt.executeQuery();
            List<T> results = new ArrayList<>();
            while (rs.next()) {
                results.add(rowMapper.apply(rs));
            }
            return results;

        } catch (SQLException e) {
            throw new RuntimeException("Erreur lors de l'ex√©cution de la requ√™te", e);
        }
    }

    public int executeUpdate(String sql, List<Object> params) {
        try (Connection conn = securePostgresService.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            for (int i = 0; i < params.size(); i++) {
                stmt.setObject(i + 1, params.get(i));
            }

            return stmt.executeUpdate();

        } catch (SQLException e) {
            throw new RuntimeException("Erreur lors de l'ex√©cution de la mise √† jour", e);
        }
    }
}
üß™ Exemple d'utilisation
Service m√©tier
java
Copier
Modifier
@Service
public class UtilisateurService {

    private final GenericQueryService queryService;

    public UtilisateurService(GenericQueryService queryService) {
        this.queryService = queryService;
    }

    public List<String> tousLesPrenoms() {
        String sql = "SELECT prenom FROM utilisateurs";
        return queryService.executeQuery(sql, List.of(), rs -> rs.getString("prenom"));
    }

    public void ajouterUtilisateur(String nom, String prenom) {
        String sql = "INSERT INTO utilisateurs (nom, prenom) VALUES (?, ?)";
        queryService.executeUpdate(sql, List.of(nom, prenom));
    }
}
Contr√¥leur simple
java
Copier
Modifier
@RestController
@RequestMapping("/utilisateurs")
public class UtilisateurController {

    private final UtilisateurService service;

    public UtilisateurController(UtilisateurService service) {
        this.service = service;
    }

    @GetMapping
    public List<String> tous() {
        return service.tousLesPrenoms();
    }

    @PostMapping
    public ResponseEntity<Void> ajouter(@RequestParam String nom, @RequestParam String prenom) {
        service.ajouterUtilisateur(nom, prenom);
        return ResponseEntity.ok().build();
    }
}
üß† Avantages
üîÑ R√©utilisable pour n‚Äôimporte quelle requ√™te SQL.

üßº Param√©tr√© proprement avec PreparedStatement (pas d'injection SQL).

üîó Connect√© directement √† ton syst√®me d'authentification Vault.

Souhaites-tu aussi :

Ajouter un support transactionnel ?

Retourner des DTO complexes ?

Utiliser JdbcTemplate ou JPA √† la place ?

Je peux adapter selon ton besoin exact.







Vous avez dit¬†:
Retourner des DTO complexes ?


ChatGPT a dit¬†:
Parfait üëå ! Retourner des DTO complexes depuis le service g√©n√©rique est tr√®s simple : il suffit de mapper le ResultSet vers ton propre type de retour, comme un POJO/DTO personnalis√©.

üß± 1. Exemple de DTO
java
Copier
Modifier
public class UtilisateurDto {
    private final Long id;
    private final String nom;
    private final String prenom;

    public UtilisateurDto(Long id, String nom, String prenom) {
        this.id = id;
        this.nom = nom;
        this.prenom = prenom;
    }

    // getters
}
üß† 2. Utilisation avec GenericQueryService
Tu mappes chaque ligne du ResultSet vers un UtilisateurDto :

java
Copier
Modifier
public List<UtilisateurDto> listerTousLesUtilisateurs() {
    String sql = "SELECT id, nom, prenom FROM utilisateurs";

    return queryService.executeQuery(sql, List.of(), rs ->
        new UtilisateurDto(
            rs.getLong("id"),
            rs.getString("nom"),
            rs.getString("prenom")
        )
    );
}
‚úÖ 3. Contr√¥leur REST
java
Copier
Modifier
@GetMapping
public List<UtilisateurDto> lister() {
    return service.listerTousLesUtilisateurs();
}
üìå Bonus : m√©thode g√©n√©rique avec Class<T> (optionnel)
Si tu veux aller encore plus g√©n√©rique, tu peux cr√©er une version qui utilise une interface RowMapper<T> ou un Function<ResultSet, T> comme d√©j√† fait.

Mais si tu as besoin d‚Äôun mapping automatique (par nom de colonne ‚Üí propri√©t√© Java), je peux aussi te g√©n√©rer une version avec BeanPropertyRowMapper de Spring ou une librairie comme MapStruct.

