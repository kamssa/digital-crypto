Oui, absolument. C'est tout à fait possible et même très courant dans les applications Spring. Le fait d'avoir des noms de propriétés différents entre l'entité (San) et le DTO (SanDto) ne cassera pas l'application, à une condition essentielle :
Il faut que la couche de conversion (le "Mapper") sache comment faire correspondre les deux.
L'un des rôles principaux du DTO est justement de découpler la représentation externe (ce que ton API expose) de la représentation interne (ta table de base de données). Tu peux donc avoir :
San.java (Entité)
code
Java
private String value;
// ...
SanDto.java (DTO)
code
Java
private String sanValue;
// ...
Comment gérer cette différence ?
Tout dépend de la manière dont tu fais la conversion.
Cas 1 : Tu utilises une librairie comme MapStruct
Si tu utilises MapStruct, c'est très simple. Il suffit d'indiquer explicitement le mapping dans l'interface de ton mapper à l'aide de l'annotation @Mapping.
Exemple de SanMapper.java avec MapStruct :
code
Java
@Mapper(componentModel = "spring")
public interface SanMapper {

    // Conversion de l'Entité vers le DTO
    @Mapping(source = "value", target = "sanValue") // <-- C'est ici la magie !
    SanDto toDto(San san);

    // Conversion du DTO vers l'Entité
    @Mapping(source = "sanValue", target = "value") // <-- Et dans l'autre sens
    San toEntity(SanDto sanDto);
    
    // Si tu as une liste
    List<SanDto> toDtoList(List<San> sanList);
}
Dans cet exemple :
source = "value" indique que la valeur vient du champ value de l'objet San.
target = "sanValue" indique que cette valeur doit être placée dans le champ sanValue de l'objet SanDto.
Cas 2 : Tu fais la conversion manuellement (dans un service, par exemple)
Si tu n'utilises pas de librairie de mapping, ton code de conversion manuel doit simplement faire la bonne assignation.
Exemple dans SanService.java :
code
Java
// Méthode de conversion Entité -> DTO
private SanDto convertToDto(San san) {
    SanDto dto = new SanDto();
    dto.setSanValue(san.getValue()); // <-- Tu fais le mapping manuellement ici
    dto.setType(san.getType());
    dto.setUrl(san.getUrl());
    return dto;
}

// Méthode de conversion DTO -> Entité
private San convertToEntity(SanDto dto) {
    San san = new San();
    san.setValue(dto.getSanValue()); // <-- Et ici dans l'autre sens
    san.setType(dto.getType());
    san.setUrl(dto.getUrl());
    return san;
}
Conclusion
Oui, tu peux avoir des noms différents. C'est une pratique standard.
L'important est de s'assurer que le code qui fait le pont entre les deux objets (le mapper) est correctement configuré pour savoir que value dans l'un correspond à sanValue dans l'autre.
Pour que je puisse t'aider à finaliser, montre-moi ton fichier de mapper (ou la méthode de service équivalente). Je te donnerai le code exact à y mettre.