‚úÖ 1. Exemple de configuration Vault c√¥t√© serveur
Ces commandes se font sur le serveur Vault (ou via API)

bash
Copier
Modifier
# Activer l'authentification par certificat
vault auth enable cert

# Associer un certificat √† une policy
vault write auth/cert/certs/my-client-cert \
    display_name="myapp" \
    policies="default" \
    certificate=@client-cert.pem
‚úÖ 2. Config c√¥t√© Java / Spring avec VaultTemplate
A. Cr√©er un RestTemplate avec certificat client
java
Copier
Modifier
@Bean
public VaultTemplate vaultTemplate() throws Exception {
    SSLContext sslContext = buildSslContextWithClientCert();

    ClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(
        HttpClients.custom()
            .setSSLContext(sslContext)
            .build()
    );

    VaultEndpoint endpoint = VaultEndpoint.from(URI.create("https://vault.example.com:8200"));

    return new VaultTemplate(endpoint, requestFactory, new SimpleSessionManager());
}

private SSLContext buildSslContextWithClientCert() throws Exception {
    // Charger le keystore avec le certificat client (.p12 ou .jks)
    KeyStore keyStore = KeyStore.getInstance("PKCS12");
    keyStore.load(new FileInputStream("client-cert.p12"), "keystore-password".toCharArray());

    KeyManagerFactory kmf = KeyManagerFactory.getInstance("SunX509");
    kmf.init(keyStore, "keystore-password".toCharArray());

    // Charger le truststore si n√©cessaire (optionnel)
    KeyStore trustStore = KeyStore.getInstance("JKS");
    trustStore.load(new FileInputStream("truststore.jks"), "truststore-password".toCharArray());

    TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
    tmf.init(trustStore);

    SSLContext sslContext = SSLContext.getInstance("TLS");
    sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), new SecureRandom());

    return sslContext;
}
Tu peux aussi tout faire avec des .pem si tu veux √©viter les .p12

B. Authentifier l‚Äôapp avec le cert
Une fois connect√© avec le VaultTemplate, tu peux obtenir le token avec :

java
Copier
Modifier
VaultResponse response = vaultTemplate().write("auth/cert/login", null);
String clientToken = response.getAuth().getClientToken();
System.out.println("üîê Vault client token: " + clientToken);
Et ensuite tu peux utiliser ce token dans un TokenAuthentication classique si tu veux :

java
Copier
Modifier
VaultTemplate template = new VaultTemplate(vaultEndpoint, requestFactory,
    new TokenAuthentication(clientToken));
üß† R√©sum√©
C‚Äôest plus s√©curis√© que token statique ou userpass

Utilise le TLS mutualis√© (serveur ‚ÜîÔ∏è client cert)

Peut √™tre combin√© avec d‚Äôautres m√©thodes (ex: approle)
////////////////////////////////////// parti 2/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
‚öôÔ∏è Exemple 3 : Auth avec certificat client (TLS) üîê
Activer cert dans Vault :

bash
Copier
Modifier
vault auth enable cert
Config Spring :

properties
Copier
Modifier
spring.cloud.vault.authentication=cert
spring.cloud.vault.uri=https://vault.example.com:8200

# Chemins vers le certificat et la cl√© priv√©e
spring.cloud.vault.ssl.key-store=classpath:client-cert.p12
spring.cloud.vault.ssl.key-store-password=changeit
spring.cloud.vault.ssl.key-store-type=PKCS12

spring.cloud.vault.ssl.trust-store=classpath:truststore.jks
spring.cloud.vault.ssl.trust-store-password=changeit
spring.cloud.vault.ssl.trust-store-type=JKS
‚úÖ Tu n‚Äôas pas besoin de token ici ‚Äî l‚Äôapp se pr√©sente avec son certificat TLS, et Vault l‚Äôidentifie directement.

Bonus : Lire un secret dans un bean
java
Copier
Modifier
@Component
@RefreshScope
public class MyVaultBean {

    @Value("${db.username}")
    private String username;

    @Value("${db.password}")
    private String password;
}
/////////////////////////////////// partie 3//////////////////////////
üß± √âtapes
‚û§ 1. Construire un VaultTemplate avec TLS client cert
java
Copier
Modifier
import org.springframework.vault.authentication.ClientCertificateAuthentication;
import org.springframework.vault.client.VaultEndpoint;
import org.springframework.vault.core.VaultTemplate;
import org.springframework.vault.support.SslConfiguration;
import org.springframework.vault.support.ClientOptions;

import java.io.File;
import java.net.URI;

public class VaultCertAuthExample {

    public VaultTemplate vaultTemplate() throws Exception {
        // Vault endpoint
        VaultEndpoint vaultEndpoint = VaultEndpoint.from(URI.create("https://vault.example.com:8200"));

        // Keystore (client cert)
        File keyStoreFile = new File("/path/to/client-cert.p12");
        char[] keyStorePassword = "keystore-pass".toCharArray();

        // Truststore (CA de Vault)
        File trustStoreFile = new File("/path/to/truststore.jks");
        char[] trustStorePassword = "truststore-pass".toCharArray();

        SslConfiguration sslConfig = SslConfiguration.builder()
            .keyStore(keyStoreFile, keyStorePassword)
            .trustStore(trustStoreFile, trustStorePassword)
            .build();

        // Auth via Cert (Vault fera auth/cert/login automatiquement)
        ClientCertificateAuthentication clientCertAuth =
            new ClientCertificateAuthentication(vaultEndpoint, sslConfig);

        // VaultTemplate avec auth + SSL config
        return new VaultTemplate(vaultEndpoint, clientCertAuth);
    }
}
‚úÖ Exemple d‚Äôusage
java
Copier
Modifier
VaultTemplate vault = new VaultCertAuthExample().vaultTemplate();

// Lecture d‚Äôun secret
VaultResponse resp = vault.read("secret/myapp");
System.out.println("üîê username: " + resp.getData().get("username"));
üí° Bonus : utiliser ce VaultTemplate dans Spring
Tu peux l‚Äôenregistrer comme un bean manuellement :

java
Copier
Modifier
@Configuration
public class VaultManualConfig {

    @Bean
    public VaultTemplate vaultTemplate() throws Exception {
        return new VaultCertAuthExample().vaultTemplate();
    }
}
üì¶ Fichiers requis
client-cert.p12 : certificat client + cl√© priv√©e (PKCS12)

truststore.jks : store contenant la CA Vault
//////////////////////////////////partie 4 /////////////////////////////
Yes, voici un script Bash tout simple üîß pour g√©n√©rer un fichier .p12 (PKCS12) √† partir de :

un certificat client .crt

une cl√© priv√©e .key

(optionnel) un certificat de CA .crt (si besoin de la cha√Æne compl√®te)

üìù Script : generate-p12.sh
bash
Copier
Modifier
#!/bin/bash

# === CONFIG ===
CERT="client-cert.crt"
KEY="client-key.key"
CA="ca-cert.crt"      # Optionnel
P12_OUT="client-cert.p12"
P12_PASS="changeit"

# === CHECK FILES ===
if [[ ! -f "$CERT" || ! -f "$KEY" ]]; then
  echo "‚ùå Certificat ou cl√© manquants. V√©rifie $CERT et $KEY"
  exit 1
fi

# === GEN .p12 ===
echo "üîê G√©n√©ration de $P12_OUT √† partir de $CERT et $KEY..."

if [[ -f "$CA" ]]; then
  openssl pkcs12 -export \
    -inkey "$KEY" \
    -in "$CERT" \
    -certfile "$CA" \
    -out "$P12_OUT" \
    -passout pass:"$P12_PASS"
else
  openssl pkcs12 -export \
    -inkey "$KEY" \
    -in "$CERT" \
    -out "$P12_OUT" \
    -passout pass:"$P12_PASS"
fi

if [[ $? -eq 0 ]]; then
  echo "‚úÖ Fichier $P12_OUT g√©n√©r√© avec succ√®s (mot de passe : $P12_PASS)"
else
  echo "‚ùå Erreur pendant la g√©n√©ration"
fi
üîß Utilisation
Place dans un dossier :

client-cert.crt (certificat sign√© par Vault ou ta CA)

client-key.key (cl√© priv√©e associ√©e)

(optionnel) ca-cert.crt (la cha√Æne interm√©diaire ou root)

Lance :

bash
Copier
Modifier
chmod +x generate-p12.sh
./generate-p12.sh
üß™ V√©rifier le .p12
bash
Copier
Modifier
keytool -list -v -keystore client-cert.p12 -storetype PKCS12 -storepass changeit
